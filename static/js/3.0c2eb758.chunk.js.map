{"version":3,"sources":["Components/HOC/withAuthRedirect.jsx","Components/NavBar/Dialogs/Dialogs.module.css","Components/NavBar/Dialogs/DialogItem/DialogItem.jsx","Components/NavBar/Dialogs/Message/Message.jsx","Components/NavBar/Dialogs/Dialogs.jsx","redux/Selectors/dialogs-selectors.js","Components/NavBar/Dialogs/DialogsContainer.jsx"],"names":["mapStateToPropsRedirected","state","isAuth","auth","withAuthRedirect","Component","connect","props","to","module","exports","DialogItem","time","addedAt","Array","split","className","classes","message","body","messageSend","messageP","dialogs_NameAndDate","date","senderName","Message","lastDialogActivityDate","currentDate","Date","getDate","month","getMonth","year","getFullYear","monthDateYear","path","id","userName","photos","small","item","onClick","getChatWithId","dialog","activeClassName","active","contacts_list","src","userPhoto","alt","ava","contacts_NameAndDate","post","NewMessageForm","reduxForm","form","onSubmitSuccess","value","dispatch","reset","onSubmit","handleSubmit","Field","component","Input","name","placeholder","messageInput","type","margin","Typography","variant","Dialogs","console","log","dialogPage","chatUsers","contacts","map","m","key","isFetching","dialogsElements","dialogsData","d","recipientName","deletedByRecipient","deletedBySender","recipientId","senderId","isSpam","viewed","dialogs","dialogsItems","Preloader","length","messages","send","values","onSendMessageClick","newMessageBody","getDialogPage","getIsFetching","DialogsContainer","this","getAllDialogs","nextProps","nextState","nextContext","React","compose","sendMessageCreator","getChat"],"mappings":"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","file":"static/js/3.0c2eb758.chunk.js","sourcesContent":["\r\nimport React from 'react'\r\nimport {Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux'\r\n\r\n\r\n\r\nlet mapStateToPropsRedirected = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    let authWrapperContainer = (props) => {\r\n        if (!props.isAuth) return <Redirect to = '/login' />\r\n        return <Component {...props} />\r\n    }\r\n   \r\n\r\nlet ConnectedAuthRedirectComponent = connect (mapStateToPropsRedirected) (authWrapperContainer);\r\n\r\nreturn ConnectedAuthRedirectComponent\r\n\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1hUY4\",\"dialogsItems\":\"Dialogs_dialogsItems__JJoCJ\",\"dialog\":\"Dialogs_dialog__17hht\",\"active\":\"Dialogs_active__5LEUc\",\"messages\":\"Dialogs_messages__tS6bo\",\"message\":\"Dialogs_message__2zs0l\",\"messageSend\":\"Dialogs_messageSend__3FgBZ\",\"messageP\":\"Dialogs_messageP__1x4aP\",\"send\":\"Dialogs_send__1SzDV\",\"sendBtn\":\"Dialogs_sendBtn__frBDl\",\"messageInput\":\"Dialogs_messageInput__1Mni0\",\"item\":\"Dialogs_item__1twiN\",\"contacts_list\":\"Dialogs_contacts_list__28jrb\",\"contacts_NameAndDate\":\"Dialogs_contacts_NameAndDate__2NaMv\",\"dialogs_NameAndDate\":\"Dialogs_dialogs_NameAndDate__nOhOB\",\"post\":\"Dialogs_post__1-mDC\",\"ava\":\"Dialogs_ava__3yLvV\",\"date\":\"Dialogs_date__2LG7i\",\"senderName\":\"Dialogs_senderName__2F-ni\"};","import React from 'react';\r\nimport classes from './../Dialogs.module.css';\r\nimport Preloader from \"../../../Common/Preloader/Preloader\";\r\n\r\nconst DialogItem = (props) => {\r\n\r\n    let time;\r\n\r\n    if (props.addedAt !== null) {\r\n        let array = new Array();\r\n        let addedAt = props.addedAt\r\n        array = addedAt.split('T');\r\n        time = array[1].split('.')[0]\r\n    }\r\n\r\n    return (\r\n\r\n        <div>\r\n            <div className={classes.message}>\r\n                {props.body === null\r\n                    ? null\r\n                    : <div className={classes.messageSend}>\r\n                        <p className={classes.messageP}>\r\n                            {props.body}\r\n                        </p>\r\n                        <div className={classes.dialogs_NameAndDate}>\r\n                            <p className={classes.date}>\r\n                                {time}\r\n                            </p>\r\n                            <p className={classes.senderName}>\r\n                                {props.senderName}\r\n                            </p>\r\n                        </div>\r\n                    </div>}\r\n\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;\r\n","import React from 'react';\r\nimport classes from './../Dialogs.module.css';\r\nimport { NavLink } from \"react-router-dom\";\r\nimport userPhoto from '../../../../Assets/Photo/userPhoto.png'\r\n\r\nfunction Message(props) {\r\n\r\n    let lastDialogActivityDate = props.lastDialogActivityDate\r\n    let currentDate = new Date(lastDialogActivityDate);\r\n    let date = currentDate.getDate();\r\n    let month = currentDate.getMonth();\r\n    let year = currentDate.getFullYear();\r\n\r\n    let monthNames = [\r\n        \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n    ];\r\n    let monthDateYear = date + \" \" + (monthNames[month]) + \", \" + year;\r\n\r\n    let openChat = (id) => {\r\n        props.getChatWithId(id)\r\n    }\r\n\r\n    let path = '/dialogs/' + props.id;\r\n\r\n    return (<>\r\n        {props.lastDialogActivityDate === null && props.id == null\r\n            && props.userName == null && props.photos.small === null ? null :\r\n            <div className={classes.item} onClick={() => openChat(props.id)}>\r\n                <div className={classes.dialog}>\r\n                    <NavLink to={path}\r\n                        activeClassName={classes.active}>\r\n                        <div className={classes.contacts_list}>\r\n                            <div>\r\n                                <img src={props.photos.small || userPhoto} alt={\"contactImg\"} className={classes.ava} />\r\n                            </div>\r\n                            <div className={classes.contacts_NameAndDate}>\r\n                                <p className={classes.post}>\r\n                                    {props.userName}\r\n                                </p>\r\n                                <p className={classes.date}>\r\n                                    {/* {props.lastDialogActivityDate} */}\r\n                                    {monthDateYear}\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </NavLink>\r\n                </div>\r\n            </div>}\r\n    </>\r\n    );\r\n}\r\n\r\nexport default Message;\r\n\r\n\r\n//    {props.messag == null} ?\r\n//         <div className= {classes.message}>\r\n//          <div className= {classes.messageSend}>\r\n//                  <p>No messages here yet... </p>\r\n//                  :<p className={classes.messageP}> {props.messag} </p></div>\r\n//               </div>","import React from 'react';\r\nimport classes from './Dialogs.module.css';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport 'fontsource-roboto';\r\nimport { Field, reduxForm, reset } from \"redux-form\";\r\nimport { Input } from \"../../Common/FormsControl/FormsControl\";\r\nimport { ButtonStyled } from \"../../Common/UI/StylesUI\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport Message from '../Dialogs/Message/Message'\r\nimport Preloader from \"../../Common/Preloader/Preloader\";\r\n\r\n\r\nfunction Dialogs(props) {\r\n\r\n    console.log('render')\r\n    let state = props.dialogPage;\r\n    let chatUsers = state.contacts.map(m =>\r\n        <Message lastDialogActivityDate={m.lastDialogActivityDate} id={m.id} key={m.id}\r\n            photos={m.photos} userName={m.userName} isFetching={state.isFetching}\r\n            getChatWithId={props.getChatWithId}\r\n        />);\r\n    let dialogsElements = state.dialogsData.map(d =>\r\n        <DialogItem recipientName={d.recipientName} id={d.id} key={d.id}\r\n            body={d.body}\r\n            addedAt={d.addedAt}\r\n            deletedByRecipient={d.deletedByRecipient}\r\n            deletedBySender={d.deletedBySender}\r\n            recipientId={d.recipientId}\r\n            senderName={d.senderName}\r\n            senderId={d.senderId}\r\n            isSpam={d.isSpam}\r\n            viewed={d.viewed}\r\n            isFetching={state.isFetching}\r\n        />);\r\n    let addNewMessage = (values) => {\r\n\r\n        props.onSendMessageClick([null, values.newMessageBody]);\r\n    }\r\n\r\n    return (\r\n        <>\r\n\r\n            <div className={classes.dialogs}>\r\n                <div className={classes.dialogsItems}>\r\n                    {props.isFetching ? <Preloader /> : null}\r\n                    {state.contacts.length === 1\r\n                        ? <p>Empty</p>\r\n                        :\r\n                        chatUsers}\r\n                </div>\r\n                <div className={classes.messages}>\r\n                    {dialogsElements}\r\n                </div>\r\n                <div className={classes.send}>\r\n                    <NewMessageForm onSubmit={addNewMessage} />\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nconst afterSubmit = (value, dispatch) =>\r\n    dispatch(reset('messageForm'));\r\n\r\n\r\nlet newMessage = (props) => {\r\n    return (<form onSubmit={props.handleSubmit}>\r\n        <Field component={Input} name={'newMessageBody'} placeholder='Enter your message'\r\n            className={classes.messageInput} />\r\n        <br></br>\r\n        <ButtonStyled type='submit' margin='10px'><Typography variant='button'>Send</Typography></ButtonStyled>\r\n        {/* <button className={classes.sendBtn} >Send</button> */}\r\n    </form>\r\n    )\r\n}\r\n\r\nlet NewMessageForm = reduxForm({\r\n    form: 'messageForm',\r\n    onSubmitSuccess: afterSubmit,\r\n})(newMessage);\r\nexport default Dialogs;\r\n\r\n//\r\n//         let messagesElements2 = state.dialogsData[0].items.map(m =>\r\n//                                                     <Message data={m.data} id={m.idOfData} key={m.idOfData}/>);\r\n\r\n//  <div className={classes.dialogs}>\r\n//                 <div className={classes.dialogsItems}>\r\n//                     {dialogsElements}\r\n//                 </div>\r\n//                 <div className={classes.messages}>\r\n//                     {messagesElements}\r\n//                 </div>\r\n//                 <div className={classes.send}>\r\n//                     <NewMessageForm onSubmit={ addNewMessage }/>\r\n//                 </div>\r\n//             </div>\r\n\r\n// До использования redux-form\r\n\r\n// let onSendMessageClick = () => {\r\n\r\n//     props.onSendMessageClick();\r\n// }\r\n\r\n\r\n// let onNewMessageChange = () => {\r\n//     let body = e.target.value;\r\n//     props.updateNewMessageBody(body)\r\n\r\n//let action =  updateNewMessageBodyCreator(body);\r\n//  props.dispatch(action);\r\n\r\n//}\r\n\r\n\r\n/* <div >\r\n            <textarea onChange= {onNewMessageChange}   value ={state.newMessageBody} placeholder='Enter your message'></textarea>\r\n            <button onClick ={onSendMessageClick}>Send</button>\r\n         </div>  */","export const getDialogPage =(state) => {\r\n    return state.dialogPage\r\n}\r\nexport const getIsFetching =(state) => {\r\n    return state.isFetching\r\n}\r\n\r\n\r\n\r\n","import Dialogs from './Dialogs';\r\nimport { sendMessageCreator, getAllDialogs } from '../../../redux/Reducers/dialogs-reducer';\r\nimport { connect } from 'react-redux'\r\nimport { withAuthRedirect } from '../../HOC/withAuthRedirect'\r\nimport { compose } from 'redux'\r\nimport { getDialogPage, getIsFetching } from './../../../redux/Selectors/dialogs-selectors';\r\nimport { getChat } from '../../../redux/Reducers/dialogs-reducer'\r\nimport React from \"react\";\r\nimport Preloader from \"../../Common/Preloader/Preloader\";\r\n\r\n\r\nclass DialogsContainer extends React.Component {\r\n\r\n    componentDidMount() {\r\n        this.props.getAllDialogs()\r\n    }\r\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\r\n        if (this.props.dialogPage.dialogsData !== nextProps) {\r\n            return true\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            <div>{this.props.isFetching ? <Preloader /> : null}</div>\r\n            <Dialogs dialogPage={this.props.dialogPage}\r\n                isFetching={this.props.isFetching}\r\n                onSendMessageClick={this.props.onSendMessageClick}\r\n                getChatWithId={this.props.getChatWithId}\r\n                getAllDialogs={this.props.getAllDialogs}\r\n\r\n            />\r\n        </>\r\n    };\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogPage: getDialogPage(state),\r\n        isFetching: getIsFetching(state)\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSendMessageClick: (newMessageBody) => {\r\n            dispatch(sendMessageCreator(newMessageBody))\r\n        },\r\n        getChatWithId: (id) => {\r\n            dispatch(getChat(id))\r\n        },\r\n        getAllDialogs: () => {\r\n            dispatch(getAllDialogs())\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose(connect(mapStateToProps, mapDispatchToProps), withAuthRedirect)(DialogsContainer);\r\n\r\n// connect создает контейнерную компоненту, внутри рендерит презентационную компоненту и внустри презентационной комп.,\r\n// в качестве пропсов и атрибутов передает те свойства которые сидят в  2 функии\r\n\r\n/* const DialogsContainer = () => {\r\n\r\n\r\n\r\n    return <StoreContext.Consumer>\r\n        {    (store) => {\r\n             let state= store.getState().dialogPage ;\r\n\r\n             let onSendMessageClick = () => {\r\n\r\n              store.dispatch(sendMessageCreator());\r\n    }\r\n           let onNewMessageChange = (body) => {\r\n               store.dispatch(updateNewMessageBodyCreator(body));\r\n\r\n    }\r\n         return <Dialogs onSendMessageClick= {onSendMessageClick} updateNewMessageBody={onNewMessageChange} dialogPage={state}/>\r\n        }   }\r\n         </StoreContext.Consumer>\r\n\r\n\r\n } */\r\n\r\n//Вид функции до compose() ()\r\n\r\n/* let AuthRedirectComponent = withAuthRedirect(Dialogs)\r\n\r\nconst DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent); */\r\n\r\n\r\n\r\n //Before redux-form\r\n\r\n//  updateNewMessageBody: (body) => {\r\n//     dispatch(updateNewMessageBodyCreator(body))\r\n// }"],"sourceRoot":""}