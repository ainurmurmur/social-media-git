{"version":3,"sources":["Components/HOC/withAuthRedirect.jsx","Components/NavBar/Dialogs/Dialogs.module.css","Components/NavBar/Dialogs/DialogItem/DialogItem.jsx","Components/NavBar/Dialogs/Message/Message.jsx","Components/NavBar/Dialogs/Dialogs.jsx","redux/Selectors/dialogs-selectors.js","Components/NavBar/Dialogs/DialogsContainer.jsx"],"names":["mapStateToPropsRedirected","state","isAuth","auth","withAuthRedirect","Component","connect","props","to","module","exports","DialogItem","path","id","className","classes","item","dialog","activeClassName","active","name","Message","message","messageSend","messageP","messag","NewMessageForm","reduxForm","form","onSubmitSuccess","value","dispatch","reset","onSubmit","handleSubmit","Field","component","Input","placeholder","messageInput","sendBtn","Dialogs","dialogPage","dialogsElements","dialogsData","map","d","key","messagesElements","messagesData","m","dialogs","dialogsItems","messages","send","values","onSendMessageClick","newMessageBody","getDialogPage","compose","sendMessageCreator"],"mappings":"oHACA,sEAMIA,EAA4B,SAACC,GAAD,MAAY,CACxCC,OAAQD,EAAME,KAAKD,SAIVE,EAAmB,SAACC,GASjC,OAFqCC,YAASN,EAATM,EANN,SAACC,GACxB,OAAKA,EAAML,OACJ,kBAACG,EAAcE,GADI,kBAAC,IAAD,CAAUC,GAAK,gB,oBCbjDC,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,yBAAyB,YAAc,6BAA6B,SAAW,0BAA0B,KAAO,sBAAsB,QAAU,yBAAyB,aAAe,8BAA8B,KAAO,wB,sFCajaC,EATI,SAACJ,GACjB,IAAIK,EAAM,YAAcL,EAAMM,GAE9B,OAAO,6BACU,yBAAKC,UAAWC,IAAQC,MAAxB,IAA+B,uBAAGF,UAAWC,IAAQE,QAAQ,kBAAC,IAAD,CAAST,GAAII,EAAMM,gBAAiBH,IAAQI,QAASZ,EAAMa,KAA3D,SCMlEC,EAVC,SAACd,GAId,OAAQ,yBAAKO,UAAYC,IAAQO,SACvB,yBAAKR,UAAYC,IAAQQ,aAAa,uBAAGT,UAAWC,IAAQS,UAAtB,IAAkCjB,EAAMkB,OAAxC,Q,iCC0C/CC,EAAiBC,YAAY,CAC7BC,KAAM,cACNC,gBAbiB,SAACC,EAAOC,GAAR,OACpBA,EAASC,YAAM,kBAUKL,EAPJ,SAACpB,GACd,OAAU,0BAAM0B,SAAU1B,EAAM2B,cACnB,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IAAQjB,KAAM,iBAAmBkB,YAAY,qBAAqBxB,UAAWC,IAAQwB,eACvG,4BAAQzB,UAAWC,IAAQyB,SAA3B,YAUFC,EAhDC,SAAClC,GAEjB,IAAIN,EAAOM,EAAMmC,WAUTC,EAAkB1C,EAAM2C,YAAYC,KAAK,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAa1B,KAAO0B,EAAE1B,KAAOP,GAAIiC,EAAEjC,GAAIkC,IAAKD,EAAEjC,QAC5FmC,EAAmB/C,EAAMgD,aAAaJ,KAAK,SAAAK,GAAC,OAAI,kBAAC,EAAD,CAAUzB,OAASyB,EAAE5B,QAAUT,GAAIqC,EAAErC,GAAIkC,IAAKG,EAAErC,QAGpG,OACI,yBAAKC,UAAWC,IAAQoC,SACpB,yBAAKrC,UAAWC,IAAQqC,cACnBT,GAEF,yBAAK7B,UAAWC,IAAQsC,UACtBL,GAED,yBAAKlC,UAAWC,IAAQuC,MACzB,kBAAC5B,EAAD,CAAgBO,SAnBX,SAACsB,GACdhD,EAAMiD,mBAAmBD,EAAOE,sB,iCCjB1BC,EAAe,SAACzD,GACzB,OAAOA,EAAMyC,YC4BFiB,sBAAUrD,aAnBH,SAACL,GACnB,MAAO,CACHyC,WAAYgB,EAAczD,OAIT,SAAC8B,GACtB,MAAO,CACHyB,mBAAoB,SAACC,GACjB1B,EAAS6B,YAAmBH,SAU+BrD,IAAxDuD,CAA2ElB","file":"static/js/3.8270d705.chunk.js","sourcesContent":["\r\nimport React from 'react'\r\nimport {Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux'\r\n\r\n\r\n\r\nlet mapStateToPropsRedirected = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    let authWrapperContainer = (props) => {\r\n        if (!props.isAuth) return <Redirect to = '/login' />\r\n        return <Component {...props} />\r\n    }\r\n   \r\n\r\nlet ConnectedAuthRedirectComponent = connect (mapStateToPropsRedirected) (authWrapperContainer);\r\n\r\nreturn ConnectedAuthRedirectComponent\r\n\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__Qhkgn\",\"dialogsItems\":\"Dialogs_dialogsItems__2hvVD\",\"dialog\":\"Dialogs_dialog__34SIB\",\"active\":\"Dialogs_active__3aMAI\",\"messages\":\"Dialogs_messages__1FsQ6\",\"message\":\"Dialogs_message__2gjFH\",\"messageSend\":\"Dialogs_messageSend__2uXSL\",\"messageP\":\"Dialogs_messageP__3i9R9\",\"send\":\"Dialogs_send__3TTR0\",\"sendBtn\":\"Dialogs_sendBtn__3IkVe\",\"messageInput\":\"Dialogs_messageInput__dpB2G\",\"item\":\"Dialogs_item__3bL5v\"};","import React from 'react';\r\nimport classes from './../Dialogs.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\n\r\nconst DialogItem = (props) => {\r\n   let path ='/dialogs/' + props.id;\r\n\r\n   return <div >\r\n                    <div className={classes.item}> <p className={classes.dialog}><NavLink to={path} activeClassName={classes.active}>{props.name} </NavLink></p></div>\r\n                </div> \r\n}\r\n{/* <li className={classes.item}><NavLink to='/profile' activeClassName={classes.active}><br/><div className={classes.navDiv}>\r\nProfile</div></NavLink></li> */}\r\nexport default DialogItem;","import React from 'react';\r\nimport classes from './../Dialogs.module.css';\r\n\r\n\r\n\r\nconst Message = (props) => {\r\n\r\n  \r\n   \r\n   return  <div className= {classes.message}>\r\n             <div className= {classes.messageSend}><p className={classes.messageP}> {props.messag} </p></div>\r\n               \r\n              </div>\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport classes from './Dialogs.module.css';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './Message/Message.jsx';\r\nimport { reduxForm, Field } from 'redux-form';\r\nimport {Input} from '../../Common/FormsControl/FormsControl'\r\nimport {reset} from 'redux-form';\r\n\r\n\r\n\r\nconst Dialogs = (props) => {   \r\n\r\nlet state= props.dialogPage ;\r\n  \r\n  \r\n    \r\nlet addNewMessage = (values) => {\r\n       props.onSendMessageClick(values.newMessageBody);\r\n      \r\n    }\r\n\r\n\r\n    let dialogsElements = state.dialogsData.map( d => <DialogItem  name= {d.name}  id={d.id} key={d.id}/>);\r\n    let messagesElements = state.messagesData.map( m => <Message  messag= {m.message}  id={m.id} key={m.id}/>);\r\n\r\n    \r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n               <div className={classes.messages}>\r\n                {messagesElements}\r\n                </div>\r\n                <div className={classes.send}>\r\n               <NewMessageForm onSubmit={addNewMessage}/>\r\n                </div>\r\n        </div>\r\n    )\r\n }\r\n\r\n const afterSubmit = (value, dispatch) =>\r\n dispatch(reset('messageForm'));\r\n\r\n   \r\nlet newMessage = (props) => {\r\n    return(   <form onSubmit={props.handleSubmit}>\r\n                 <Field component={Input}  name={'newMessageBody'}  placeholder='Enter your message' className={classes.messageInput}/>\r\n                 <button className={classes.sendBtn} >Send</button>\r\n              </form> \r\n    )\r\n}\r\nlet NewMessageForm = reduxForm ( {\r\n    form: 'messageForm',\r\n    onSubmitSuccess: afterSubmit,\r\n})(newMessage);\r\n\r\n\r\nexport default Dialogs;\r\n\r\n\r\n// До использования redux-form\r\n\r\n// let onSendMessageClick = () => {\r\n       \r\n    //     props.onSendMessageClick();\r\n    // }\r\n\r\n    \r\n    // let onNewMessageChange = () => {\r\n    //     let body = e.target.value;\r\n    //     props.updateNewMessageBody(body)\r\n        \r\n       //let action =  updateNewMessageBodyCreator(body);\r\n       //  props.dispatch(action); \r\n      \r\n    //}\r\n\r\n\r\n     /* <div >\r\n                 <textarea onChange= {onNewMessageChange}   value ={state.newMessageBody} placeholder='Enter your message'></textarea>\r\n                 <button onClick ={onSendMessageClick}>Send</button>\r\n              </div>  */","export const getDialogPage =(state) => {\r\n    return state.dialogPage\r\n}\r\n\r\n\r\n","import Dialogs from './Dialogs';\r\nimport {sendMessageCreator} from '../../../redux/Reducers/dialogs-reducer';\r\nimport {connect} from 'react-redux'\r\nimport {withAuthRedirect} from '../../HOC/withAuthRedirect'\r\nimport {compose} from 'redux'\r\nimport { getDialogPage } from './../../../redux/Selectors/dialogs-selectors';\r\n\r\n\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogPage: getDialogPage(state)\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSendMessageClick: (newMessageBody) => {\r\n            dispatch(sendMessageCreator(newMessageBody))\r\n        },\r\n        \r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default compose ( connect(mapStateToProps, mapDispatchToProps), withAuthRedirect) (Dialogs);\r\n\r\n// connect создает контейнерную компоненту, внутри рендерит презентационную компоненту и внустри презентационной комп.,\r\n// в качестве пропсов и атрибутов передает те свойства которые сидят в  2 функии\r\n\r\n/* const DialogsContainer = () => {   \r\n\r\n    \r\n\r\n    return <StoreContext.Consumer> \r\n        {    (store) => {  \r\n             let state= store.getState().dialogPage ;\r\n\r\n             let onSendMessageClick = () => {\r\n       \r\n              store.dispatch(sendMessageCreator());\r\n    }\r\n           let onNewMessageChange = (body) => {\r\n               store.dispatch(updateNewMessageBodyCreator(body));    \r\n      \r\n    }\r\n         return <Dialogs onSendMessageClick= {onSendMessageClick} updateNewMessageBody={onNewMessageChange} dialogPage={state}/>\r\n        }   }\r\n         </StoreContext.Consumer>\r\n\r\n    \r\n } */\r\n\r\n//Вид функции до compose() ()\r\n\r\n /* let AuthRedirectComponent = withAuthRedirect(Dialogs) \r\n\r\n const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent); */\r\n\r\n\r\n\r\n //Before redux-form\r\n\r\n//  updateNewMessageBody: (body) => {\r\n//     dispatch(updateNewMessageBodyCreator(body))\r\n// }"],"sourceRoot":""}