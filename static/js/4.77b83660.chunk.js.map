{"version":3,"sources":["Components/HOC/withAuthRedirect.jsx","Components/NavBar/Dialogs/Dialogs.module.css","Components/NavBar/Dialogs/DialogItem/DialogItem.jsx","Components/NavBar/Dialogs/Message/Message.jsx","Components/NavBar/Dialogs/Dialogs.jsx","redux/Selectors/dialogs-selectors.js","Components/NavBar/Dialogs/DialogsContainer.jsx"],"names":["mapStateToPropsRedirected","state","isAuth","auth","withAuthRedirect","Component","connect","props","to","module","exports","DialogItem","path","id","className","classes","dialog","active","name","Message","message","messag","NewMessageForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Input","validate","required","placeholder","Dialogs","dialogPage","dialogsElements","dialogsData","map","d","key","messagesElements","messagesData","m","dialogs","dialogsItems","messages","values","onSendMessageClick","newMessageBody","getDialogPage","compose","dispatch","sendMessageCreator"],"mappings":"oHACA,sEAMIA,EAA4B,SAACC,GAAD,MAAY,CACxCC,OAAQD,EAAME,KAAKD,SAIVE,EAAmB,SAACC,GASjC,OAFqCC,YAASN,EAATM,EANN,SAACC,GACxB,OAAKA,EAAML,OACJ,kBAACG,EAAcE,GADI,kBAAC,IAAD,CAAUC,GAAK,gB,oBCbjDC,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,4B,sFCYhKC,EARI,SAACJ,GACjB,IAAIK,EAAM,YAAcL,EAAMM,GAE9B,OAAO,yBAAKC,UAAWC,IAAQC,OAAQ,IAAKD,IAAQE,QACnC,kBAAC,IAAD,CAAST,GAAII,GAAb,IAAqBL,EAAMW,KAA3B,OCMLC,EAVC,SAACZ,GAId,OAAQ,6BACE,yBAAKO,UAAYC,IAAQK,SAAUb,EAAMc,OAAzC,O,iCCwCTC,EAAiBC,YAAY,CAC7BC,KAAM,eADWD,EAPJ,SAAChB,GACd,OAAU,0BAAMkB,SAAUlB,EAAMmB,cACnB,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IAAOC,SAAU,CAACC,KAAWb,KAAM,iBAAmBc,YAAY,uBACpF,4CASFC,EA7CC,SAAC1B,GAEjB,IAAIN,EAAOM,EAAM2B,WAUTC,EAAkBlC,EAAMmC,YAAYC,KAAK,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAapB,KAAOoB,EAAEpB,KAAOL,GAAIyB,EAAEzB,GAAI0B,IAAKD,EAAEzB,QAC5F2B,EAAmBvC,EAAMwC,aAAaJ,KAAK,SAAAK,GAAC,OAAI,kBAAC,EAAD,CAAUrB,OAASqB,EAAEtB,QAAUP,GAAI6B,EAAE7B,GAAI0B,IAAKG,EAAE7B,QAGpG,OACI,yBAAKC,UAAWC,IAAQ4B,SACpB,yBAAK7B,UAAWC,IAAQ6B,cACnBT,GAEL,6BACG,yBAAKrB,UAAWC,IAAQ8B,UACtBL,GAEF,kBAAClB,EAAD,CAAgBG,SAnBX,SAACqB,GACdvC,EAAMwC,mBAAmBD,EAAOE,sB,iCCjB1BC,EAAe,SAAChD,GACzB,OAAOA,EAAMiC,YC4BFgB,sBAAU5C,aAnBH,SAACL,GACnB,MAAO,CACHiC,WAAYe,EAAchD,OAIT,SAACkD,GACtB,MAAO,CACHJ,mBAAoB,SAACC,GACjBG,EAASC,YAAmBJ,SAU+B5C,IAAxD8C,CAA2EjB","file":"static/js/4.77b83660.chunk.js","sourcesContent":["\r\nimport React from 'react'\r\nimport {Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux'\r\n\r\n\r\n\r\nlet mapStateToPropsRedirected = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    let authWrapperContainer = (props) => {\r\n        if (!props.isAuth) return <Redirect to = '/login' />\r\n        return <Component {...props} />\r\n    }\r\n   \r\n\r\nlet ConnectedAuthRedirectComponent = connect (mapStateToPropsRedirected) (authWrapperContainer);\r\n\r\nreturn ConnectedAuthRedirectComponent\r\n\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__Qhkgn\",\"dialogsItems\":\"Dialogs_dialogsItems__2hvVD\",\"dialog\":\"Dialogs_dialog__34SIB\",\"active\":\"Dialogs_active__3aMAI\",\"messages\":\"Dialogs_messages__1FsQ6\"};","import React from 'react';\r\nimport classes from './../Dialogs.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\n\r\nconst DialogItem = (props) => {\r\n   let path ='/dialogs/' + props.id;\r\n\r\n   return <div className={classes.dialog +' '+ classes.active}>\r\n                    <NavLink to={path}> {props.name} </NavLink>\r\n                </div> \r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport classes from './../Dialogs.module.css';\r\n\r\n\r\n\r\nconst Message = (props) => {\r\n\r\n   \r\n\r\n   return  <div>\r\n             <div className= {classes.message}>{props.messag} </div>\r\n               \r\n              </div>\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport classes from './Dialogs.module.css';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './Message/Message.jsx';\r\nimport { reduxForm, Field } from 'redux-form';\r\nimport {required} from '../../../Utils/Validators'\r\nimport {Input} from '../../Common/FormsControl/FormsControl'\r\n\r\n\r\n\r\nconst Dialogs = (props) => {   \r\n\r\nlet state= props.dialogPage ;\r\n  \r\n  \r\n    \r\nlet addNewMessage = (values) => {\r\n       props.onSendMessageClick(values.newMessageBody);\r\n      \r\n    }\r\n\r\n\r\n    let dialogsElements = state.dialogsData.map( d => <DialogItem  name= {d.name}  id={d.id} key={d.id}/>);\r\n    let messagesElements = state.messagesData.map( m => <Message  messag= {m.message}  id={m.id} key={m.id}/>);\r\n\r\n    \r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div>\r\n               <div className={classes.messages}>\r\n                {messagesElements}\r\n               </div>\r\n               <NewMessageForm onSubmit={addNewMessage}/>\r\n              \r\n            </div>\r\n        </div>\r\n    )\r\n }\r\n\r\n\r\nlet newMessage = (props) => {\r\n    return(   <form onSubmit={props.handleSubmit}>\r\n                 <Field component={Input} validate={[required]} name={'newMessageBody'}  placeholder='Enter your message'/>\r\n                 <button>Send</button>\r\n              </form> \r\n    )\r\n}\r\nlet NewMessageForm = reduxForm ( {\r\n    form: 'messageForm'\r\n})(newMessage);\r\n\r\n\r\nexport default Dialogs;\r\n\r\n\r\n// До использования redux-form\r\n\r\n// let onSendMessageClick = () => {\r\n       \r\n    //     props.onSendMessageClick();\r\n    // }\r\n\r\n    \r\n    // let onNewMessageChange = () => {\r\n    //     let body = e.target.value;\r\n    //     props.updateNewMessageBody(body)\r\n        \r\n       //let action =  updateNewMessageBodyCreator(body);\r\n       //  props.dispatch(action); \r\n      \r\n    //}\r\n\r\n\r\n     /* <div >\r\n                 <textarea onChange= {onNewMessageChange}   value ={state.newMessageBody} placeholder='Enter your message'></textarea>\r\n                 <button onClick ={onSendMessageClick}>Send</button>\r\n              </div>  */","export const getDialogPage =(state) => {\r\n    return state.dialogPage\r\n}\r\n\r\n\r\n","import Dialogs from './Dialogs';\r\nimport {sendMessageCreator} from '../../../redux/Reducers/dialogs-reducer';\r\nimport {connect} from 'react-redux'\r\nimport {withAuthRedirect} from '../../HOC/withAuthRedirect'\r\nimport {compose} from 'redux'\r\nimport { getDialogPage } from './../../../redux/Selectors/dialogs-selectors';\r\n\r\n\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogPage: getDialogPage(state)\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSendMessageClick: (newMessageBody) => {\r\n            dispatch(sendMessageCreator(newMessageBody))\r\n        },\r\n        \r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default compose ( connect(mapStateToProps, mapDispatchToProps), withAuthRedirect) (Dialogs);\r\n\r\n// connect создает контейнерную компоненту, внутри рендерит презентационную компоненту и внустри презентационной комп.,\r\n// в качестве пропсов и атрибутов передает те свойства которые сидят в  2 функии\r\n\r\n/* const DialogsContainer = () => {   \r\n\r\n    \r\n\r\n    return <StoreContext.Consumer> \r\n        {    (store) => {  \r\n             let state= store.getState().dialogPage ;\r\n\r\n             let onSendMessageClick = () => {\r\n       \r\n              store.dispatch(sendMessageCreator());\r\n    }\r\n           let onNewMessageChange = (body) => {\r\n               store.dispatch(updateNewMessageBodyCreator(body));    \r\n      \r\n    }\r\n         return <Dialogs onSendMessageClick= {onSendMessageClick} updateNewMessageBody={onNewMessageChange} dialogPage={state}/>\r\n        }   }\r\n         </StoreContext.Consumer>\r\n\r\n    \r\n } */\r\n\r\n//Вид функции до compose() ()\r\n\r\n /* let AuthRedirectComponent = withAuthRedirect(Dialogs) \r\n\r\n const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent); */\r\n\r\n\r\n\r\n //Before redux-form\r\n\r\n//  updateNewMessageBody: (body) => {\r\n//     dispatch(updateNewMessageBodyCreator(body))\r\n// }"],"sourceRoot":""}